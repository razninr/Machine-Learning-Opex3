# -*- coding: utf-8 -*-
"""Testagain1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pbg0PINstGGMOkBdfNSkMXDqtfvnIv2j
"""

!pip install streamlit
import streamlit as st
import pandas as pd
import pickle
#from sklearn.ensemble import RandomForestRegressor

# Load the trained model
with open('/content/rf_trained_model.pkl', 'rb') as file:
    model = pickle.load(file)

# List of feature names in the order as they appear in the input data
all_features = ['Temp1', 'FlowC1', 'Temp2', 'TempC1', 'Temp3', 'TempC2', 'TempC3', 'Temp4', 'PressureC1',
                'Temp5', 'Temp6', 'OC1', 'Temp7', 'Temp8', 'TempC9', 'FlowC2', 'Temp9', 'Temp10', 'FlowC3',
                'FlowC4', 'Temp11', 'Temp12', 'InvTemp1', 'InvTemp2', 'InvTemp3', 'InvPressure1']

# Get the top 6 relevant features based on importance
top_features = [feature for _, feature in sorted(zip(model.feature_importances_, all_features), reverse=True)[:6]]

def predict(model, input_data):
    # Make predictions using the loaded model
    predictions = model.predict(input_data)

    return predictions[0]

def main():
    # Set the title and description of the app
    st.title('Distillation Dataset Prediction')
    st.write('Enter the input features and get predictions for distillation.')

    # Input form for user to input the features
    input_features = {}  # Create a dictionary to store user input

    st.write("Enter the values for the following features:")

    # Display only the top 6 relevant features to the user
    for feature in top_features:
        input_features[feature] = st.number_input(f'{feature}:')

    # Convert the user input to a DataFrame
    input_df = pd.DataFrame([input_features])

    if st.button('Predict'):  # Trigger the prediction when the user clicks the "Predict" button
        prediction = predict(model, input_df)  # Call the predict function
        st.write(f'Predicted distillation value: {prediction}')  # Display the prediction result

if __name__ == '__main__':
    main()